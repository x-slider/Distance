name: .NET Core Desktop Release Build and Publish

on:
  push:
    branches: [ "master" ]

jobs:
  build_and_publish:
    runs-on: windows-latest

    env:
      Solution_Name: Distance.sln
      Wap_Project_Directory: Distance
      Wap_Project_Path: Distance\Distance.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Generate unique tag based on date and time
      id: tag_output # This ID is used to reference the output
      run: |
        echo "UNIQUE_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV # Sets it as an env variable for use in this job
        echo "::set-output name=tag::$(date +'%Y%m%d%H%M%S')" # Correctly outputs the tag for use in subsequent jobs
      shell: bash
      
    - name: Restore the application
      run: msbuild ${{ env.Solution_Name }} /t:Restore /p:Configuration=Release

    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path ${{ env.Wap_Project_Directory }} -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: Publish the application
      run: dotnet publish ${{ env.Wap_Project_Path }} -c Release -r win-x64 --self-contained true --output ${{env.Wap_Project_Directory}}/publish /p:PublishSingleFile=true /p:PublishTrimmed=true

    - name: Remove the pfx
      run: Remove-Item -path ${{ env.Wap_Project_Directory }}\GitHubActionsWorkflow.pfx
    
    - name: List output files
      run: Get-ChildItem -Path ${{env.Wap_Project_Directory}}/publish -Recurse

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: DistanceExecutable
        path: ${{env.Wap_Project_Directory}}/publish/Distance.exe

    outputs:
      generated_tag: ${{ steps.tag_output.outputs.tag }} # Ensure this matches the step ID above

  publish-release:
    needs: build_and_publish
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - uses: actions/download-artifact@v3
      with:
        name: DistanceExecutable

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.build_and_publish.outputs.generated_tag }}
        release_name: Release ${{ needs.build_and_publish.outputs.generated_tag }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Distance.exe
        asset_name: Distance.exe
        asset_content_type: application/octet-stream
